name: .NET - Redis - SqlServer - RabbitMQ

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  versionamento:
    runs-on: ubuntu-latest
    name: Versionamento

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - uses: codacy/git-version@2.8.0
        id: version
        with:
          release-branch: main
          prefix: v

      - name: Tag do repositorio
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::notice:: ${{ steps.version.outputs.version }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
          git push --tags
        if: github.ref == 'refs/heads/main'

  backend-build-and-test:
    needs: versionamento
    runs-on: ubuntu-latest
    name: Backend Build and Test

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
          cache: "true"
          cache-dependency-path: ./**/packages.lock.json

      - name: Restaure
        run: |
          dotnet restore ./ApiRedisSqlRabbitMQ.sln

      - name: Build
        run: |
          dotnet build --configuration Release --no-restore ./ApiRedisSqlRabbitMQ.sln

      - name: Test
        run: |
          dotnet test --no-build --no-restore ./ApiRedisSqlRabbitMQ.sln --configuration Release --logger trx --results-directory "TestResults"
        if: github.ref != 'refs/heads/main'

      - uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results
          path: TestResults
        if: github.ref != 'refs/heads/main'

      - name: Publish
        run: dotnet publish ./src/api/Api.csproj --no-restore --no-build --configuration Release --output ./publish

      - name: Tag published version
        uses: restackio/update-json-file-action@2.1
        with:
          file: ./publish/appsettings.json
          fields: '{"MY_APP_VERSION": "${{ needs.versionamento.outputs.version }}"}'

      - name: Upload dotnet artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: ./publish

  dependency-check:
    name: Dependency Check
    needs: versionamento
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/dependency-review-action@v4 #Ele verifica solicitações de pull para identificar quaisquer dependências novas ou atualizadas que estejam sendo introduzidas no projeto
        with:
          comment-summary-in-pr: always
    if: github.ref != 'refs/heads/main'

  code-security-check:
    needs: versionamento
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: github/codeql-action/init@v3
        name: Initialize CodeQL - Backend
        with:
          languages: csharp
          build-mode: autobuild

      - uses: github/codeql-action/analyze@v3
        name: Analyze CodeQL - Backend
        with:
          category: "/language:csharp"

  build-docker-image:
    name: Packing and Publish
    needs: [versionamento, backend-build-and-test]
    runs-on: ubuntu-latest

    env:
      version: ${{ needs.versionamento.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: app
          merge-multiple: false

      - name: Build Docker image
        run: |
          docker build -t ${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.version }} .

      - name: Tag Docker image as Latest
        run: |
          docker tag ${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.version }} ${{ vars.DOCKERHUB_REPOSITORY }}:latest
        if: github.ref == 'refs/heads/main'

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Push
        run: |
          docker push --all-tags raphaelpereiravalle/ApiRedisSqlRabbitMQ
      # deploy:
  #     runs-on: ubuntu-latest

  #     services:
  #       redis:
  #         image: redis:7-alpine
  #         ports:
  #           - 6379:6379
  #         options: >-
  #           --health-cmd="redis-cli ping || exit 1"
  #           --health-interval=10s
  #           --health-timeout=5s
  #           --health-retries=5

  #       sqlserver:
  #         image: mcr.microsoft.com/mssql/server:2022-latest
  #         env:
  #           ACCEPT_EULA: "Y"
  #           SA_PASSWORD: "Admin@12345"
  #         ports:
  #           - 1433:1433
  #         options: >-
  #           --health-cmd=" /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Admin@12345 -Q 'SELECT 1' || exit 1"
  #           --health-interval=10s
  #           --health-timeout=5s
  #           --health-retries=5

  #       rabbitmq:
  #         image: rabbitmq:3-management
  #         env:
  #           RABBITMQ_DEFAULT_USER: guest
  #           RABBITMQ_DEFAULT_PASS: guest
  #         ports:
  #           - 5672:5672
  #           - 15672:15672
  #         options: >-
  #           --health-cmd="rabbitmq-diagnostics -q ping"
  #           --health-interval=10s
  #           --health-timeout=5s
  #           --health-retries=5

  #     steps:
  #       - name: Checkout código
  #         uses: actions/checkout@v4

  #       - name: Setup .NET 8
  #         uses: actions/setup-dotnet@v4
  #         with:
  #           dotnet-version: "8.0.x"

  #       - name: Restaurar dependências
  #         run: dotnet restore

  #       - name: Build do projeto
  #         run: dotnet build --configuration Release --no-restore

  #       - name: Rodar testes
  #         run: dotnet test --configuration Release --no-build --verbosity normal
  #         env:
  #           ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=UsuariosDb;User Id=sa;Password=Admin@12345;TrustServerCertificate=True;"
  #           Redis__Host: "localhost:6379"
  #           RabbitMq__Host: "localhost"
  #           RabbitMq__Port: "5672"
  #           RabbitMq__User: "guest"
  #           RabbitMq__Password: "guest"
